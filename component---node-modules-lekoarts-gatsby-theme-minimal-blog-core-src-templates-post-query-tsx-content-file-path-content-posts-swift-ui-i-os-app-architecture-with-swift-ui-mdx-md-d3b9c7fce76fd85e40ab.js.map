{"version":3,"file":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx-content-file-path-content-posts-swift-ui-i-os-app-architecture-with-swift-ui-mdx-md-d3b9c7fce76fd85e40ab.js","mappings":"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","sources":["webpack://minimal-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/components/post-footer.tsx","webpack://minimal-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/components/post.tsx","webpack://minimal-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/@lekoarts/gatsby-theme-minimal-blog-core/components/post.tsx","webpack://minimal-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/components/item-tags.tsx","webpack://minimal-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/components/seo.tsx","webpack://minimal-blog/./content/posts/swift-ui/iOS App Architecture with SwiftUI.mdx.md","webpack://minimal-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog-core/src/templates/post-query.tsx"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\nimport * as React from \"react\"\nimport type { MBPostProps } from \"./post\"\n\nconst PostFooter = ({ post }: MBPostProps) => null\n\nexport default PostFooter\n","/** @jsx jsx */\nimport type { HeadFC, PageProps } from \"gatsby\"\nimport * as React from \"react\"\nimport { jsx, Heading } from \"theme-ui\"\nimport Layout from \"./layout\"\nimport ItemTags from \"./item-tags\"\nimport Seo from \"./seo\"\nimport PostFooter from \"./post-footer\"\n\nexport type MBPostProps = {\n  post: {\n    slug: string\n    title: string\n    date: string\n    tags?: {\n      name: string\n      slug: string\n    }[]\n    description?: string\n    canonicalUrl?: string\n    excerpt: string\n    timeToRead?: number\n    banner?: {\n      childImageSharp: {\n        resize: {\n          src: string\n        }\n      }\n    }\n  }\n}\n\nconst px = [`16px`, `8px`, `4px`]\nconst shadow = px.map((v) => `rgba(0, 0, 0, 0.1) 0px ${v} ${v} 0px`)\n\nconst Post: React.FC<React.PropsWithChildren<PageProps<MBPostProps>>> = ({ data: { post }, children }) => (\n  <Layout>\n    <Heading as=\"h1\" variant=\"styles.h1\">\n      {post.title}\n    </Heading>\n    <p sx={{ color: `secondary`, mt: 3, a: { color: `secondary` }, fontSize: [1, 1, 2] }}>\n      <time>{post.date}</time>\n      {post.tags && (\n        <React.Fragment>\n          {` — `}\n          <ItemTags tags={post.tags} />\n        </React.Fragment>\n      )}\n      {post.timeToRead && ` — `}\n      {post.timeToRead && <span>{post.timeToRead} min read</span>}\n    </p>\n    <section\n      sx={{\n        my: 5,\n        \".gatsby-resp-image-wrapper\": {\n          my: [4, 4, 5],\n          borderRadius: `4px`,\n          boxShadow: shadow.join(`, `),\n          \".gatsby-resp-image-image\": {\n            borderRadius: `4px`,\n          },\n        },\n        variant: `layout.content`,\n      }}\n    >\n      {children}\n    </section>\n    <PostFooter post={post} />\n  </Layout>\n)\n\nexport default Post\n\nexport const Head: HeadFC<MBPostProps> = ({ data: { post } }) => (\n  <Seo\n    title={post.title}\n    description={post.description ? post.description : post.excerpt}\n    image={post.banner ? post.banner?.childImageSharp?.resize?.src : undefined}\n    pathname={post.slug}\n    canonicalUrl={post.canonicalUrl}\n  />\n)\n","import type { PageProps } from \"gatsby\"\nimport * as React from \"react\"\nimport Post, { Head, MBPostProps } from \"../../../components/post\"\n\nexport default function MinimalBlogCorePost({ ...props }: PageProps<MBPostProps>) {\n  return <Post {...props} />\n}\n\nexport { Head }\n","/** @jsx jsx */\nimport { jsx } from \"theme-ui\"\nimport * as React from \"react\"\nimport { Link } from \"gatsby\"\nimport useMinimalBlogConfig from \"../hooks/use-minimal-blog-config\"\nimport replaceSlashes from \"../utils/replaceSlashes\"\n\ntype TagsProps = {\n  tags: {\n    name: string\n    slug: string\n  }[]\n}\n\nconst ItemTags = ({ tags }: TagsProps) => {\n  const { tagsPath, basePath } = useMinimalBlogConfig()\n\n  return (\n    <React.Fragment>\n      {tags.map((tag, i) => (\n        <React.Fragment key={tag.slug}>\n          {!!i && `, `}\n          <Link sx={(t) => ({ ...t.styles?.a })} to={replaceSlashes(`/${basePath}/${tagsPath}/${tag.slug}`)}>\n            {tag.name}\n          </Link>\n        </React.Fragment>\n      ))}\n    </React.Fragment>\n  )\n}\n\nexport default ItemTags\n","import * as React from \"react\"\nimport { withPrefix } from \"gatsby\"\nimport useSiteMetadata from \"../hooks/use-site-metadata\"\n\ntype SEOProps = {\n  title?: string\n  description?: string\n  pathname?: string\n  image?: string\n  children?: React.ReactNode\n  canonicalUrl?: string\n}\n\nconst Seo = ({\n  title = ``,\n  description = ``,\n  pathname = ``,\n  image = ``,\n  children = null,\n  canonicalUrl = ``,\n}: SEOProps) => {\n  const site = useSiteMetadata()\n\n  const {\n    siteTitle,\n    siteTitleAlt: defaultTitle,\n    siteUrl,\n    siteDescription: defaultDescription,\n    siteImage: defaultImage,\n    author,\n    siteLanguage,\n  } = site\n\n  const seo = {\n    title: title ? `${title} | ${siteTitle}` : defaultTitle,\n    description: description || defaultDescription,\n    url: `${siteUrl}${pathname || ``}`,\n    image: `${siteUrl}${image || defaultImage}`,\n  }\n  return (\n    <>\n      <html lang={siteLanguage} />\n      <title>{seo.title}</title>\n      <meta name=\"description\" content={seo.description} />\n      <meta name=\"image\" content={seo.image} />\n      <meta property=\"og:title\" content={seo.title} />\n      <meta property=\"og:url\" content={seo.url} />\n      <meta property=\"og:description\" content={seo.description} />\n      <meta property=\"og:image\" content={seo.image} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta property=\"og:image:alt\" content={seo.description} />\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      <meta name=\"twitter:title\" content={seo.title} />\n      <meta name=\"twitter:url\" content={seo.url} />\n      <meta name=\"twitter:description\" content={seo.description} />\n      <meta name=\"twitter:image\" content={seo.image} />\n      <meta name=\"twitter:image:alt\" content={seo.description} />\n      <meta name=\"twitter:creator\" content={author} />\n      <meta name=\"gatsby-theme\" content=\"@lekoarts/gatsby-theme-minimal-blog\" />\n      <link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href={withPrefix(`/favicon-32x32.png`)} />\n      <link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href={withPrefix(`/favicon-16x16.png`)} />\n      <link rel=\"apple-touch-icon\" sizes=\"180x180\" href={withPrefix(`/apple-touch-icon.png`)} />\n      {canonicalUrl ? <link rel=\"canonical\" href={canonicalUrl} /> : null}\n      {children}\n    </>\n  )\n}\n\nexport default Seo\n","/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    ul: \"ul\",\n    li: \"li\",\n    code: \"code\",\n    h3: \"h3\",\n    pre: \"pre\",\n    a: \"a\",\n    em: \"em\",\n    strong: \"strong\",\n    img: \"img\",\n    h2: \"h2\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"At TheLeftBit we've built great UIKit apps that have stood the test of time and scaled beautifully by following three basic rules:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"Keep it simple\"), \"\\n\", React.createElement(_components.li, null, \"Pass values to functions\"), \"\\n\", React.createElement(_components.li, null, \"Don't fight the platform\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"Now, as we transition to SwiftUI, we're formalizing how things are structured in order for our developers to tackle creating beautiful user interfaces without too much fuzz. We wanted the code to adopt modern Swift concepts like Structured Concurrency, Result Builders and Generics in order to be even more efficient than what we where when building UIs with UIKit.\"), \"\\n\", React.createElement(_components.p, null, \"We quickly came to the realization that in most modern apps, most of the Data and State is remote. It's behind some kind of HTTP call. And this fact should get first-citizen support in whatever patterns we chose.\"), \"\\n\", React.createElement(_components.p, null, \"On the other hand, SwiftUI expects data to be stored and passed around the Views using property wrappers like \", React.createElement(_components.code, null, \"@State\"), \", \", React.createElement(_components.code, null, \"@Binding\"), \" or \", React.createElement(_components.code, null, \"@Published\"), \" . To simplify this, one of the easiest ways is to store all the required properties in some \\\"Data Model\\\" object that stores all the properties using \", React.createElement(_components.code, null, \"@Published\"), \" (not necessary if we were to target iOS 17 thanks to \", React.createElement(_components.code, null, \"Observable\"), \", but the gist is the same) and then pass that object into the \", React.createElement(_components.code, null, \"View\"), \" either using simple injection in the initializer or an \", React.createElement(_components.code, null, \".environmentObject()\"), \" call.\"), \"\\n\", React.createElement(_components.h3, null, \"Simple Book List:\"), \"\\n\", React.createElement(_components.p, null, \"Let's keep in mind these two things, and build a simple SwiftUI view that shows a list of books that comes from a remote REST API.\"), \"\\n\", React.createElement(_components.p, null, \"The \", React.createElement(_components.code, null, \"Book\"), \" model looks like:\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-swift\"\n  }, \"struct Book: Identifiable, Decodable {\\n\\tlet id: UUID\\n\\tlet title: String\\n\\tlet author: String\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, \"After that, we need some object to hold all the books for the \", React.createElement(_components.code, null, \"View\"), \". We are calling it \", React.createElement(_components.code, null, \"DataModel\"), \" in this example, but could be anything the team decides on. Let's create an \", React.createElement(_components.code, null, \"ObservableObject\"), \" for this:\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-swift\"\n  }, \"  class DataModel: ObservableObject {    \\n    @Published var isLoading: Bool\\n    @Published var error: Swift.Error?\\n    @Published var books: [Book]\\n\\t\\tinit(isLoading: Bool = false, error: Error? = nil, books: [BookList.Book] = []) { ... }\\n  }\\n\\n\")), \"\\n\", React.createElement(_components.p, null, \"Now, let's display this in a list:\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-swift\"\n  }, \"struct BookList: View {\\n  \\n  @ObservedObject var dataModel: DataModel\\n  \\n  var body: some View {\\n  \\tif dataModel.isLoading {\\n      ProgressView()\\n    } else let error = dataModel.error {\\n      ErrorView(error)\\n    } else {\\n      List(dataModel.books, id: \\\\.id) { book in\\n\\t\\t\\t\\tVStack {\\n        \\tText(book.title)\\n          \\t.foregroundStyle(.primary)\\n        \\tText(book.author)\\n          \\t.foregroundStyle(.secondary)\\n      \\t}\\n      }\\n    }\\n  }\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, \"This all compiles and similar code has been written in countless blog posts all over the internet. But a question come to mind:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"How do we populate that data?\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"We could add to \", React.createElement(_components.code, null, \"DataModel\"), \"  an async function to populate the data:\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-swift\"\n  }, \"extension DataModel {\\n  func populateData() async {\\n    self.isLoading = true\\n    let request: URLRequest = { ... }\\n    do {\\n      let response = try await URLSession.shared.data(for: request).0\\n      let books = try JSONDecoder().decode([Book].self, from: response)\\n      self.books = books \\n    } catch {\\n      self.error = error\\n    }\\n    self.isLoading = false\\n  }\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, \"There's a lot of book-keeping going on. We have to make sure we're setting the correct loading state, capturing the error and storing the response in the \", React.createElement(_components.code, null, \"@Published\"), \" property. Doable, but still, definitely improvable.\"), \"\\n\", React.createElement(_components.p, null, \"And now we have to figure out a place to call this from the View to make sure it's populated. Thankfully, since iOS 15 we've had the \", React.createElement(_components.code, null, \".task()\"), \" modifier, which allows us to run \", React.createElement(_components.code, null, \"async\"), \"  functions when the view is about to be rendered.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-swift\"\n  }, \"struct BookList: View {\\n  var body: some View {\\n    { ... }\\n    .task {\\n      await dataModel.populateData()\\n    }\\n  }\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, \"This works, and most people leave it like this and continue with their lives.\"), \"\\n\", React.createElement(_components.p, null, \"But there are several code smells here:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"The \", React.createElement(_components.code, null, \"if {} else if {} else {}\"), \" branch in the view's body will sure become more and more complex as we add features to this view.\", \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"Imagine a new requirement to only show a special upsell banner in case the user doesn't have a subscription. \", React.createElement(_components.a, {\n    href: \"https://en.wikipedia.org/wiki/Cyclomatic_complexity\"\n  }, \"Cyclomatic complexity\"), \" is always something we have to be aware of and try to reduce.\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"If we try to Preview this \", React.createElement(_components.code, null, \"View\"), \", it'll make a network call to populate it's data. This is not something you want to do for your production apps, since there might be Authentication required, but also, it's definetly not the \", React.createElement(_components.em, null, \"correct\"), \" thing to do, since it makes your Previews unpredictable, and Previews should be treated as Unit Tests: they should succeed regardless of the network status of your machine.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"So how do we address these issues?\"), \"\\n\", React.createElement(_components.h3, null, \"Async Initialization\"), \"\\n\", React.createElement(_components.p, null, \"The first breakthrough in the way we architecture SwiftUI apps was that we could add two initializers to our \", React.createElement(_components.code, null, \"DataModel\"), \" objects:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"An async initalizer for when the view is run regularly.\"), \"\\n\", React.createElement(_components.li, null, \"A sync initializer when the view is Previewed.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"To continue with the previous example, we can now remove those pesky \", React.createElement(_components.code, null, \"var isLoading: Bool\"), \" and \", React.createElement(_components.code, null, \"var error: Swift.Error?\"), \" properties, the \", React.createElement(_components.code, null, \"populateData\"), \" function and do:\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-swift\"\n  }, \"extension DataModel {\\n  \\n  init(restAPIClient: RestAPIClient) async throws {\\n    self.books = try await restAPIClient.fetchBookList()\\n  }\\n  \\n  init(books: [Book]) {\\n    self.books = books\\n  }\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, \"In the above example, let's assume that \", React.createElement(_components.code, null, \"RestAPIClient\"), \"  is an object that will perform all the \", React.createElement(_components.code, null, \"URLSession\"), \" and JSON parsing work and return a parsed array of \", React.createElement(_components.code, null, \"Book\"), \" in case the request is sent and parsed succesfully.\"), \"\\n\", React.createElement(_components.p, null, \"We can now, from a Preview, create a \", React.createElement(_components.code, null, \"DataModel\"), \" with mock Books and inject it in the View, allowing us to work the the View's layout without launching the App or sending network requests to servers.\"), \"\\n\", React.createElement(_components.p, null, \"Like we say here at TheLeftBit, \\\"if Previews don't work, it's not SwiftUI!\\\"\"), \"\\n\", React.createElement(_components.p, null, \"And, by removing the \", React.createElement(_components.code, null, \"loading\"), \" and \", React.createElement(_components.code, null, \"error\"), \" properties, plus annotating the initializer as \", React.createElement(_components.code, null, \"async throws\"), \" we've moved the error and async handling a level up. This means that now \", React.createElement(_components.code, null, \"DataModel\"), \" is not directly usable from \", React.createElement(_components.code, null, \"BookListView\"), \", since we can't set the \", React.createElement(_components.code, null, \"@ObservedObject\"), \" of a view asynchronously. Which brings us to our second breakthrough:\"), \"\\n\", React.createElement(_components.h3, null, \"Async View\"), \"\\n\", React.createElement(_components.p, null, \"As we mentioned earlier, we need some async context to create the \", React.createElement(_components.code, null, \"DataModel\"), \" before passing it to the \", React.createElement(_components.code, null, \"View\"), \"'s initializer.  And the best way to create this async context is using the \", React.createElement(_components.code, null, \".task\"), \" view modifier, but for that we need to create a \", React.createElement(_components.code, null, \"View\"), \".\"), \"\\n\", React.createElement(_components.p, null, \"Let's wrap this async work in a \", React.createElement(_components.code, null, \"View\"), \": something like this would work:\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-swift\"\n  }, \"struct BookListAsync: View {\\n  \\n  let restAPIClient: RestAPIClient\\n\\t@State var loadingPhase = LoadingPhase.loading\\n  \\n  enum LoadingPhase {\\n    case loading\\n    case loaded(DataModel)\\n    case failed(Swift.Error)\\n  }\\n  \\n  var body: some View {\\n    contentView\\n    .task {\\n      self.loadingPhase = .loading\\n      do {\\n        let dataModel = try await DataModel(restAPIClient: restAPIClient)\\n        self.loadingPhase = .loaded(dataModel)\\n      } catch {\\n        self.loadingPhase = .failed(error)\\n      }\\n    }\\n  }\\n  \\n  @ViewBuilder\\n  private var contentView: some View {    \\n\\t\\tswitch loadingPhase {\\n    case .loading: \\n      ProgressView()\\n    case .failed(let error): \\n      Text(error.localizedDescription)\\n    case .loaded(let dataModel):\\n      BookList(dataModel: dataModel)\\n    }\\n  }\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, \"This is much better: we are using the  \", React.createElement(_components.code, null, \"LoadingPhase\"), \" enum to model the what to show in the View: either a spinner, a message with the error or the actual \", React.createElement(_components.code, null, \"BookList\"), \". And, we are leveraging the \", React.createElement(_components.code, null, \".task\"), \" modifier to perform the actual creation of the \", React.createElement(_components.code, null, \"DataModel\"), \".\"), \"\\n\", React.createElement(_components.p, null, \"This comes with a lot of advantages:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"The \", React.createElement(_components.code, null, \"BookList\"), \" is only created when there is \", React.createElement(_components.strong, null, \"actual data\"), \" to show. It made no semantical sense for it to be holding an empty array, much better to express that that Array is in a remote location by making the only way to get to it \", React.createElement(_components.code, null, \"async\"), \".\"), \"\\n\", React.createElement(_components.li, null, \"Once the \", React.createElement(_components.code, null, \"BookList\"), \" is loaded and on-screen, any error that occurs after that (for example, marking a \", React.createElement(_components.code, null, \"Book\"), \" as read) is handled on a completely different context from the loading error; reducing the overall complexity of the system.\"), \"\\n\", React.createElement(_components.li, null, \"Since we are encapsulating the Async work in another \", React.createElement(_components.code, null, \"View\"), \", we'll be leveraging SwiftUI to cancel the Task in case the user is not interested anymore. For example, the user will dismiss this view using the back button of a NavigationStack, or swiping down a modal sheet. This will free resources and make sure the app is always performant.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"This is already a lot better, but this \", React.createElement(_components.code, null, \"BookListAsync\"), \" is tightly coupled to \", React.createElement(_components.code, null, \"BookList\"), \" and it's \", React.createElement(_components.code, null, \"DataModel\"), \", making it impossible to reuse it with another view. We have two options to make this view reusable:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"Use Swift Macros to auto-generate the code\"), \"\\n\", React.createElement(_components.li, null, \"Use Generics to inject the View.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"We discarted using Swift Macros since we were having trouble making the inputs of the view more flexible.\"), \"\\n\", React.createElement(_components.p, null, \"The final component we built, using Swift Generics and applied to the \", React.createElement(_components.code, null, \"BookListAsync\"), \" example, has the following API:\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-swift\"\n  }, \"var body: some View {\\n    AsyncView(\\n        id: $viewID\\n        dataGenerator: {\\n            try await DataModel(restAPIClient: restAPIClient)\\n        },\\n        hostedViewGenerator: { dataModel in\\n            BookList(dataModel: dataModel)\\n        },\\n        loadingViewGenerator: {\\n            ProgressView()\\n        },\\n        errorViewGenerator: { error, onRetry in\\n            Text(error.localizedDescription)\\n        }\\n    )\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, \"Where the parameters are:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.code, null, \"id\"), \": is the identifier passed to the \", React.createElement(_components.code, null, \".task(id:priority:_:)\"), \" \", React.createElement(_components.a, {\n    href: \"https://developer.apple.com/documentation/swiftui/view/task(id:priority:_:)\"\n  }, \"View Modifier\"), \". Having this parameter will allow us to reload the view if an upstream value changes. Think for example, a screen where the there are some sort of filter UI that triggers a new HTTP request to reload the contents of a list. This becomes trivial now.\", \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"If the view will not be reloaded as a result of user input, you can safely pass a \", React.createElement(_components.code, null, \".constant()\"), \" value here with a hardcoded string.\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.code, null, \"dataGenerator\"), \": this closure will generate the data required by the view to render it's contents. If an error is thrown in this closure, the Error View will be shown.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.code, null, \"hostedViewGenerator\"), \": this closure will generate the view once the data it needs is available.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.code, null, \"loadingViewGenerator\"), \": this closure will generate the view that will be shown during the \", React.createElement(_components.code, null, \"dataGenerator\"), \" execution.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.code, null, \"errorViewGenerator\"), \": this closure will generate the view that will be shown when an error is thrown.\", \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"The \", React.createElement(_components.code, null, \"error\"), \" is passed in order to make sure that the view can show an appropiate message. Also, an \", React.createElement(_components.code, null, \"onRetry\"), \" closure is passed to make sure the user can retry the operation.\"), \"\\n\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"The implementation itself is not as interesting, you can check it out \", React.createElement(_components.a, {\n    href: \"https://github.com/theleftbit/BSWInterfaceKit/blob/develop/Sources/BSWInterfaceKit/SwiftUI/Views/AsyncView.swift\"\n  }, \"here\"), \". Having this View allows us to architect our code in a much better way:\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-swift\"\n  }, \"struct BookList: View {\\n  @ObservedObject var dataModel: DataModel\\n  var body: some View { ... }\\n  \\n  struct Async: View {\\n      let restAPIClient: RestAPIClient\\n      var body: some View {\\n      \\t  AsyncView(...)\\n      }\\n  }\\n} \\n\")), \"\\n\", React.createElement(_components.p, null, \"This makes sure that when using autocomplete, the developer \", React.createElement(_components.strong, null, \"won't find\"), \" a way to create a \", React.createElement(_components.code, null, \"BookList\"), \" without a \", React.createElement(_components.code, null, \"DataModel\"), \", and nudge him towards \", React.createElement(_components.code, null, \"BookList.Async\"), \".\"), \"\\n\", React.createElement(_components.img, {\n    src: \"https://i.imgur.com/a4ya0JR.jpg\",\n    alt: \"\"\n  }), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Note:\"), \" How the \", React.createElement(_components.code, null, \"RestAPIClient\"), \" instance is injected in the \", React.createElement(_components.code, null, \"BookList.Async\"), \" view is up to you; we're using simple value injection, but this could very well be an \", React.createElement(_components.code, null, \"@EnvironmentObject\"), \" or anything else you and your team are using for Dependency Injection.\"), \"\\n\", React.createElement(_components.h2, null, \"Conclusions:\"), \"\\n\", React.createElement(_components.p, null, \"These two breakthroughs have allowed us to iterate quickly, making sure everyday tasks are handled by this abstractions and allowing us to focus on what sets up each project apart.\"), \"\\n\", React.createElement(_components.p, null, \"All of this, by still leveraging the same three concepts:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"Keep it simple:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"A simple API and a simple abstraction allows developers of all seniority levels to use it.\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"Pass values to functions:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"How the dependencies are passed to the \", React.createElement(_components.code, null, \"Async\"), \" view is up to the developer, but it's always evident what's happening.\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"Don't fight the platform:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"Leverage the platform (in this case SwiftUI) and it's primitives and data-flows, allowing our code to mature along the platform.\"), \"\\n\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"Thanks for reading and \", React.createElement(_components.a, {\n    href: \"https://twitter.com/theleftbit\"\n  }, \"contact us\"), \" in case you have any questions!\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React from \"react\";\nimport GATSBY_COMPILED_MDX from \"/Users/jserra/Developer/TheLeftBit/the-left-bit-stories/content/posts/swift-ui/iOS App Architecture with SwiftUI.mdx.md\";\nimport PostComponent, {Head} from \"../components/post\";\nPostComponent\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostComponent, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport {Head};\nconst query = \"2040642971\";\n"],"names":["_ref","post","shadow","map","v","data","children","jsx","Layout","Heading","as","variant","title","sx","color","mt","a","fontSize","date","tags","React","ItemTags","timeToRead","my","borderRadius","boxShadow","join","PostFooter","Head","_ref2","_post$banner","_post$banner$childIma","_post$banner$childIma2","Seo","description","excerpt","image","banner","childImageSharp","resize","src","undefined","pathname","slug","canonicalUrl","MinimalBlogCorePost","props","Post","tagsPath","basePath","useMinimalBlogConfig","tag","i","key","Link","t","_t$styles","styles","to","replaceSlashes","name","site","useSiteMetadata","siteTitle","siteTitleAlt","defaultTitle","siteUrl","siteDescription","defaultDescription","siteImage","defaultImage","author","siteLanguage","seo","url","lang","content","property","rel","type","sizes","href","withPrefix","_createMdxContent","_components","Object","assign","p","ul","li","code","h3","pre","em","strong","img","h2","_provideComponents","components","className","alt","wrapper","MDXLayout","GatsbyMDXWrapper","PostComponent","GATSBY_COMPILED_MDX"],"sourceRoot":""}